{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u51060 \uc0\u51652  \uc0\u53944 \uc0\u47532 \uc0\u47484  \uc0\u48176 \uc0\u50676 \uc0\u47196  \uc0\u51649 \uc0\u47148 \uc0\u54868 \uc0\u54616 \uc0\u44256 , \uc0\u48152 \uc0\u45824 \uc0\u47196  \uc0\u50669 \uc0\u51649 \uc0\u47148 \uc0\u54868 \uc0\u54616 \uc0\u45716  \uc0\u44592 \uc0\u45733 \uc0\u51012  \uc0\u44396 \uc0\u54788 \uc0\u54616 \uc0\u46972 . \uc0\u51593  \uc0\u45796 \uc0\u51020 \uc0\u44284  \uc0\u44057 \uc0\u51008  \uc0\u53944 \uc0\u47532 \uc0\u45716  [1, 2, 3, null, null, 4, 5]\uc0\u54805 \uc0\u53468 \uc0\u47196  \uc0\u51649 \uc0\u47148 \uc0\u54868 \uc0\u54624  \uc0\u49688  \uc0\u51080 \uc0\u51012  \uc0\u44163 \uc0\u51060 \uc0\u45796 .\
\
Input: root = [1,2,3,null,null,4,5]\
Output: [1,2,3,null,null,4,5]\
\
# Definition for a binary tree node.\
# class TreeNode(object):\
#     def __init__(self, x):\
#         self.val = x\
#         self.left = None\
#         self.right = None\
\
1.bfs\
import collections\
\
class Codec:\
    def serialize(self, root):\
        """Encodes a tree to a single string.\
        \
        :type root: TreeNode\
        :rtype: str\
        """\
        if root == None:\
            return ''\
        result = []\
        q = collections.deque([root])\
        while any(q):\
                for _ in range(len(q)):\
                    node = q.popleft()\
                    if node == None:\
                        node = TreeNode('!')\
                    else:\
                        q.append(node.left)\
                        q.append(node.right)\
                    result.append(str(node.val))\
        return ' '.join(result)\
        \
\
    def deserialize(self, data):\
        """Decodes your encoded data to tree.\
        \
        :type data: str\
        :rtype: TreeNode\
        """\
        if data == '':\
            return None\
        data = collections.deque(data.split())\
        q = collections.deque([TreeNode(int(data.popleft()))])\
        result = TreeNode(0, q[0], None)\
        while any([True for d in data if d != '!']):\
            node = q.popleft()\
            left = data.popleft()\
            if left != '!':\
                node.left = TreeNode(int(left))\
                q.append(node.left)\
            else:\
                node.left = None\
            right = data.popleft()\
            if right != '!':\
                node.right = TreeNode(int(right))\
                q.append(node.right)\
            else:\
                node.right = None\
        return result.left\
\
import collections\
\
class Codec:\
    def serialize(self, root: TreeNode) -> str:\
        queue = collections.deque([root])\
        result = ['#']\
        while queue:\
            node = queue.popleft()\
            if node:\
                queue.append(node.left)\
                queue.append(node.right)\
\
                result.append(str(node.val))\
            else:\
                result.append('#')\
        return ' '.join(result)\
\
    def deserialize(self, data: str) -> TreeNode:\
        if data == '# #':\
            return None\
        nodes = data.split()\
        root = TreeNode(int(nodes[1]))\
        queue = collections.deque([root])\
        index = 2\
        while queue:\
            node = queue.popleft()\
            if nodes[index] is not '#':\
                node.left = TreeNode(int(nodes[index]))\
                queue.append(node.left)\
            index += 1\
\
            if nodes[index] is not '#':\
                node.right = TreeNode(int(nodes[index]))\
                queue.append(node.right)\
            index += 1\
        return root\
}