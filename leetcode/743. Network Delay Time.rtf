{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
K\uc0\u48512 \uc0\u53552  \uc0\u52636 \uc0\u48156 \uc0\u54644  \uc0\u47784 \uc0\u46304  \uc0\u45432 \uc0\u46300 \uc0\u44032  \uc0\u49888 \uc0\u54840 \uc0\u47484  \uc0\u48155 \uc0\u51012  \uc0\u49688  \uc0\u51080 \uc0\u45716  \uc0\u49884 \uc0\u44036 \uc0\u51012  \uc0\u44228 \uc0\u49328 \uc0\u54616 \uc0\u46972 . \uc0\u48520 \uc0\u44032 \uc0\u45733 \uc0\u54624  \uc0\u44221 \uc0\u50864  -1\uc0\u51012  \uc0\u47532 \uc0\u53556 \uc0\u54620 \uc0\u45796 . \uc0\u51077 \uc0\u47141 \uc0\u44050  (u, v, w)\uc0\u45716  \uc0\u44033 \uc0\u44033  \uc0\u52636 \uc0\u48156 \uc0\u51648 , \uc0\u46020 \uc0\u52265 \uc0\u51648 , \uc0\u49548 \uc0\u50836 \uc0\u49884 \uc0\u44036 \uc0\u51004 \uc0\u47196  \uc0\u44396 \uc0\u49457 \uc0\u46104 \uc0\u47728 , \uc0\u51204 \uc0\u52404  \uc0\u45432 \uc0\u46300 \uc0\u51032  \uc0\u44060 \uc0\u49688 \uc0\u45716  N\uc0\u51004 \uc0\u47196  \uc0\u51077 \uc0\u47141 \uc0\u48155 \uc0\u45716 \uc0\u45796 .\
\
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\
Output: 2\
\
1.dijkstra\
import collections\
import heapq\
\
class Solution:\
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\
        graph = collections.defaultdict(list)\
        for u, v, w in times:\
            graph[u].append([v, w])\
        dist = collections.defaultdict(int)\
        for i in range(1, n + 1):\
            if i == k:\
                dist[i] = 0\
            else:\
                dist[i] = sys.maxsize\
        q = [[k, 0]]\
        while len(q) > 0:\
            curr, wei = heapq.heappop(q)\
            for u, w in graph[curr]:\
                alt = wei + w\
                if dist[u] > alt:\
                    dist[u] = alt\
                    heapq.heappush(q, [u, alt])\
        for d in dist:\
            if dist[d] == sys.maxsize:\
                return -1\
        return max(dist.values())\
\
import collections\
import heapq\
\
class Solution:\
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\
        graph = collections.defaultdict(list)\
        for u, v, w in times:\
            graph[u].append((v,w))\
        q = [(0, k)]\
        dist = collections.defaultdict(int)\
        while len(q) > 0:\
            time, node = heapq.heappop(q)\
            if node not in dist:\
                dist[node] = time\
                for v, w in graph[node]:\
                    alt = time + w\
                    heapq.heappush(q, (alt, v))\
        if len(dist) == n:\
            return max(dist.values()) \
        return -1\
\
import collections\
import heapq\
\
class Solution:\
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\
        graph = collections.defaultdict(list)\
        for u, v, w in times:\
            graph[u].append([v, w])\
        result_times = collections.defaultdict(int)\
        for t in result_times:\
            result_times[t] = float('inf')\
        q = [(0, k)]\
        while len(q) > 0:\
            time, node = heapq.heappop(q)\
            if node not in result_times:\
                result_times[node] = time\
                for v, w in graph[node]:\
                    alt = time + w\
                    heapq.heappush(q, [alt, v])\
        if len(result_times) == n:\
            return max(result_times.values())\
        else:\
            return -1\
\
import collections\
import heapq\
\
class Solution:\
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\
        times_dict = collections.defaultdict(list)\
        for u, v, w in times:\
            times_dict[u].append([w, v, u])\
        dists = collections.defaultdict(lambda :float('inf'))\
        dists['start'] = 0\
        hq = [[0, k, 'start']]\
        while len(hq) > 0:\
            w, v, u = heapq.heappop(hq)\
            if dists[v] == float('inf'):\
                dists[v] = w\
                for nw, nv, nu in times_dict[v]:\
                    heapq.heappush(hq, [dists[v] + nw, nv, nu])\
                    \
        return max(list(dists.values())) if len(list(dists.values())) > n else -1\
}