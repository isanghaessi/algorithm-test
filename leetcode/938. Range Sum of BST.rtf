{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid-781977464}
{\list\listtemplateid2\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid-1367962632}
}
{\*\listoverridetable{\listoverride\listid-1367962632\listoverridecount0\ls-1367962632}{\listoverride\listid-781977464\listoverridecount0\ls-781977464}}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u51060 \uc0\u51652  \uc0\u53456 \uc0\u49353 \uc0\u53944 \uc0\u47532 (BST)\uc0\u44032  \uc0\u51452 \uc0\u50612 \uc0\u51276 \uc0\u51012  \uc0\u46412  L\uc0\u51060 \uc0\u49345  R \uc0\u51060 \uc0\u54616 \uc0\u51032  \uc0\u44050 \uc0\u51012  \uc0\u51648 \uc0\u45772  \uc0\u45432 \uc0\u46300 \uc0\u51032  \uc0\u54633 \uc0\u51012  \uc0\u44396 \uc0\u54616 \uc0\u46972 .\
\
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15\
Output: 32\
\
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
\
1.\uc0\u48652 \uc0\u47336 \uc0\u53944 \uc0\u54252 \uc0\u49828 \
class Solution:\
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:\
        if not root:\
            return 0\
\
        return (root.val if L <= root.val <= R else 0) + self.rangeSumBST(root.left, L, R) + self.rangeSumBST(root.right, L, R)\
\
2.\uc0\u51116 \uc0\u44480 \
class Solution:\
    def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:\
        def check(node, val):\
            if node == None:\
                return val\
            elif node.val < low:\
                val = check(node.right, val)\
            elif node.val > high:\
                val = check(node.left, val)\
            else:\
                val += node.val\
                val = check(node.left, val)\
                val = check(node.right, val)\
            return val\
        \
        return check(root, 0)\
\
class Solution:\
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:\
        def dfs(node: TreeNode):\
            if not node:\
                return 0\
            if node.val < L:\
                return dfs(node.right)\
            elif node.val > R:\
                return dfs(node.left)\
            return node.val + dfs(node.left) + dfs(node.right)\
\
        return dfs(root)\
\
3.\uc0\u48152 \uc0\u48373 \
class Solution:\
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:\
        stack, sum = [root], 0\
        while stack:\
            node = stack.pop()\
            if node:\
                if node.val > L:\
                    stack.append(node.left)\
                if node.val < R:\
                    stack.append(node.right)\
                if L <= node.val <= R:\
                    sum += node.val\
        return sum\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls-781977464\ilvl2{\listtext    \uc0\u9656    }\uc0\u48152 \uc0\u48373  dfs - \uc0\u49828 \uc0\u53469 \
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
class Solution:\
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:\
        stack, sum = [root], 0\
        while stack:\
            node = stack.pop(0)\
            if node:\
                if node.val > L:\
                    stack.append(node.left)\
                if node.val < R:\
                    stack.append(node.right)\
                if L <= node.val <= R:\
                    sum += node.val\
        return sum\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls-1367962632\ilvl2{\listtext    \uc0\u9656    }\uc0\u48152 \uc0\u48373  bys - \uc0\u53328 \
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:\
        def search(node):\
            nonlocal answer\
            \
            if not node:\
                \
                return\
            if node.val < low:\
                search(node.right)\
            elif low <= node.val and node.val <= high:\
                answer += node.val\
                search(node.left)\
                search(node.right)\
            else:\
                search(node.left)\
                \
        \
        answer = 0\
        search(root)\
        \
        return answer\
}