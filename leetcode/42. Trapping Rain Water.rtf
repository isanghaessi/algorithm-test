{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid-216403558}
{\list\listtemplateid2\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid-1737222852}
{\list\listtemplateid3\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid1002798706}
}
{\*\listoverridetable{\listoverride\listid-1737222852\listoverridecount0\ls-1737222852}{\listoverride\listid1002798706\listoverridecount0\ls1002798706}{\listoverride\listid-216403558\listoverridecount0\ls-216403558}}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u45458 \uc0\u51060 \uc0\u47484  \uc0\u51077 \uc0\u47141 \uc0\u48155 \uc0\u50500  \uc0\u48708  \uc0\u50728  \uc0\u54980  \uc0\u50620 \uc0\u47560 \uc0\u45208  \uc0\u47566 \uc0\u51008  \uc0\u47932 \uc0\u51060  \uc0\u49939 \uc0\u51068  \uc0\u49688  \uc0\u51080 \uc0\u45716 \uc0\u51648  \uc0\u44228 \uc0\u49328 \uc0\u54616 \uc0\u46972 .\
\
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\
Output: 6\
\
1.\uc0\u48652 \uc0\u47336 \uc0\u53944  \uc0\u54252 \uc0\u49828 \
def trap(height: List[int]) -> int:\
    volume = 0\
    for i, h in enumerate(height):\
        left_max = max(height[:i + 1])\
        right_max = max(height[i:])\
        volume += min(left_max, right_max) - h\
    return volume\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls-216403558\ilvl2{\listtext    \uc0\u9656    }\uc0\u44033  \uc0\u50836 \uc0\u49548 \uc0\u47560 \uc0\u45796  \uc0\u52292 \uc0\u50892 \uc0\u51656 \uc0\u49688  \uc0\u51080 \uc0\u45716  \uc0\u50577 (\uc0\u50812 \uc0\u51901 , \uc0\u50724 \uc0\u47480 \uc0\u51901  \uc0\u48317 \uc0\u51032  \uc0\u52572 \uc0\u45824 \uc0\u51032  \uc0\u52572 \uc0\u49548 )\uc0\u51012  \uc0\u52286 \uc0\u51020 \
\ls-216403558\ilvl2{\listtext    \uc0\u9656    }O(n^2)\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
2. \uc0\u53804 \uc0\u54252 \uc0\u51064 \uc0\u53552  \uc0\u54876 \uc0\u50857 \
def trap(height: List[int]) -> int:\
    if not height:\
        return 0\
    volume = 0\
    left, right = 0, len(height) - 1\
    left_max, right_max = height[left], height[right]\
    while left < right:\
        left_max, right_max = max(left_max, height[left]), max(\
            right_max, height[right])\
        if left_max <= right_max:\
            volume += left_max - height[left]\
            left += 1\
        else:\
            volume += right_max - height[right]\
            right -= 1\
    return volume\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls-1737222852\ilvl2{\listtext    \uc0\u9656    }\uc0\u53804  \uc0\u54252 \uc0\u51064 \uc0\u53552 \uc0\u47484  \uc0\u50812 \uc0\u51901 , \uc0\u50724 \uc0\u47480 \uc0\u51901 \uc0\u50640 \uc0\u49436  \uc0\u52572 \uc0\u45824  \uc0\u51648 \uc0\u51216 \uc0\u51004 \uc0\u47196  \uc0\u51060 \uc0\u46041 \uc0\u54616 \uc0\u47732 \uc0\u49436  \uc0\u52292 \uc0\u50892 \uc0\u51656 \uc0\u49688  \uc0\u51080 \uc0\u45716  \uc0\u50577 \uc0\u51012  \uc0\u52286 \uc0\u51020 \
\ls-1737222852\ilvl2{\listtext    \uc0\u9656    }O(n)\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
3. \uc0\u49828 \uc0\u53469  \uc0\u54876 \uc0\u50857 \
def trap(height: List[int]) -> int:\
    stack = []\
    volume = 0\
    for i in range(len(height)):\
        while stack and height[i] > height[stack[-1]]:\
            top = stack.pop()\
            if not len(stack):\
                break\
            distance = i - stack[-1] - 1\
            print('d', distance)\
            waters = min(height[i], height[stack[-1]]) - height[top]\
            print('w', waters)\
            volume += distance * waters\
        stack.append(i)\
    return volume\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls1002798706\ilvl2{\listtext    \uc0\u9656    }too difficult solve\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
class Solution:\
    def trap(self, height: List[int]) -> int:\
        def check(i):\
            low = min(max(height[:i + 1]), max(height[i:]))\
            if low > height[i]:\
                return low - height[i]\
            else:\
                return 0\
            \
        result = 0\
        for i in range(len(height)):\
            result += check(i)\
        return result\
\
class Solution:\
    def trap(self, height: List[int]) -> int:\
        if len(height) == 0:\
            \
            return 0\
        result = 0\
        left = 0\
        right = len(height) - 1\
        left_max = height[left]\
        right_max = height[right]\
        while left < right:\
            if left_max <= right_max:\
                left += 1\
                if left_max >= height[left]:\
                    result += left_max - height[left]\
                else:\
                    left_max = height[left]\
            else:\
                right -= 1\
                if right_max >= height[right]:\
                    result += right_max - height[right]\
                else:\
                    right_max = height[right]\
                    \
        return result\
                \
class Solution:\
    def trap(self, height: List[int]) -> int:\
        result = 0\
        stack = []\
        for i in range(len(height)):\
            while len(stack) > 0 and height[i] > height[stack[-1]]:\
                temp = stack.pop()\
                if len(stack) == 0:\
                    break\
                dist = i - stack[-1] - 1\
                water = min(height[i], height[stack[-1]]) - height[temp]\
                result += dist * water\
            stack.append(i)\
            \
        return result\
\
class Solution:\
    def trap(self, height: List[int]) -> int:\
        result = 0\
        for i, h in enumerate(height):\
            max_left_height = max(height[:i]) if height[:i] else h\
            max_right_height = max(height[i + 1:]) if height[i + 1:] else h\
            if max_left_height > h and max_right_height > h:\
                result += min(max_left_height, max_right_height) - h\
        return result\
\
class Solution:\
    def trap(self, height: List[int]) -> int:\
        result = 0\
        stack = []\
        for i, h in enumerate(height):\
            max_stack = max(stack) if stack else h\
            max_right_height = max(height[i + 1:]) if height[i + 1:] else h\
            if max_stack > h and max_right_height > h:\
                result += min(max_stack, max_right_height) - h\
            stack.append(h)\
        return result\
\
class Solution:\
    def threeSum(self, nums: List[int]) -> List[List[int]]:\
        result = []\
        nums.sort()\
        i = 0\
        while i < len(nums) - 2:\
            if nums[i] in map(lambda a: a[0], result):\
                i += 1\
                continue\
            rest = - nums[i]\
            left, right = i + 1, len(nums) - 1\
            while left < right:\
                if nums[left] + nums[right] == rest:\
                    result.append([nums[i], nums[left], nums[right]])\
                    while left < right and nums[left] == nums[left + 1]:\
                        left += 1\
                    while left < right and nums[right] == nums[right - 1]:\
                        right -= 1\
                    left += 1\
                    right -= 1\
                elif nums[left] + nums[right] < rest:\
                    left += 1\
                else:\
                    right -= 1\
            i += 1\
        return result\
\
\
\
\
\
}