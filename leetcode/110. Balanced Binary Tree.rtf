{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u51060 \uc0\u51652  \uc0\u53944 \uc0\u47532 \uc0\u44032  \uc0\u45458 \uc0\u51060  \uc0\u44512 \uc0\u54805 \uc0\u51064 \uc0\u51648  \uc0\u54032 \uc0\u45800 \uc0\u54616 \uc0\u46972 .\
\
Input: root = [3,9,20,null,null,15,7]\
Output: true\
\
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
\
1.dfs\
class Solution:\
    result = True\
    \
    def isBalanced(self, root: TreeNode) -> bool:\
        def dfs(node, depth):\
            if node == None:\
                return depth - 1\
            left = dfs(node.left, depth + 1)\
            right = dfs(node.right, depth + 1)\
            if abs(left - right) > 1:\
                self.result = False\
            return max(left, right)\
        \
        dfs(root, 1)\
        return self.result\
\
class Solution:\
    def isBalanced(self, root: TreeNode) -> bool:\
        def check(root):\
            if not root:\
                return 0\
            left = check(root.left)\
            right = check(root.right)\
            if left == -1 or right == -1 or abs(left - right) > 1:\
                return -1\
            return max(left, right) + 1\
        \
        return check(root) != -1\
\
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    def isBalanced(self, root: Optional[TreeNode]) -> bool:\
        def dfs(node):\
            nonlocal answer\
            \
            if not answer or not node:\
                \
                return 0\
            left = dfs(node.left)\
            right = dfs(node.right)\
            if abs(left - right) > 1:\
                \
                answer = False\
            return max(left, right) + 1\
        \
        answer = True\
        dfs(root)\
        \
        return answer}