{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
BST\uc0\u51032  \uc0\u44033  \uc0\u45432 \uc0\u46300 \uc0\u47484  \uc0\u54788 \uc0\u51116 \uc0\u44050 \uc0\u48372 \uc0\u45796  \uc0\u45908  \uc0\u53360  \uc0\u44050 \uc0\u51012  \uc0\u44032 \uc0\u51652  \uc0\u47784 \uc0\u46304  \uc0\u45432 \uc0\u46300 \uc0\u51032  \uc0\u54633 \uc0\u51004 \uc0\u47196  \uc0\u47564 \uc0\u46308 \uc0\u50612 \uc0\u46972 .\
\
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\
\
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
\
1.\uc0\u51473 \uc0\u50948  \uc0\u49692 \uc0\u54924 \
class Solution:\
    def bstToGst(self, root: TreeNode) -> TreeNode:\
        def inOrder(node, val):\
            if node == None:\
                return val\
            node.val += inOrder(node.right, val)\
            val = inOrder(node.left, node.val)\
            return val\
        \
        inOrder(root, 0)\
        return root\
\
class Solution:\
    val = 0\
    def bstToGst(self, root: TreeNode) -> TreeNode:\
        if root:\
            self.bstToGst(root.right)\
            self.val += root.val\
            root.val = self.val\
            self.bstToGst(root.left)\
        return root\
\
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    def bstToGst(self, root: TreeNode) -> TreeNode:\
        def in_order(node, sum_of_right):\
            if not node:\
                \
                return sum_of_right\
            node.val += in_order(node.right, sum_of_right)\
            \
            return in_order(node.left, node.val)\
            \
        \
        in_order(root, 0)\
        \
        return root\
\
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    val = 0\
    \
    def bstToGst(self, root: TreeNode) -> TreeNode:\
        if root:\
            self.bstToGst(root.right)\
            self.val += root.val\
            root.val = self.val\
            self.bstToGst(root.left)\
            \
        return root\
}