{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u48512 \uc0\u54840 \uc0\u50630 \uc0\u45716  \uc0\u51221 \uc0\u49688 \uc0\u54805 \uc0\u51012  \uc0\u51077 \uc0\u47141 \uc0\u48155 \uc0\u50500  1\uc0\u48708 \uc0\u53944 \uc0\u51032  \uc0\u44060 \uc0\u49688 \uc0\u47484  \uc0\u52636 \uc0\u47141 \uc0\u54616 \uc0\u46972 .\
\
Input: n = 00000000000000000000000000001011\
Output: 3\
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\
\
1.\uc0\u48708 \uc0\u53944  \uc0\u50672 \uc0\u49328 \
class Solution:\
    def hammingWeight(self, n: int) -> int:\
        return bin(n).count('1')\
\
class Solution:\
    def hammingWeight(self, n: int) -> int:\
        result = 0\
        while n:\
            n &= n - 1\
            result += 1\
        return result\
\
class Solution:\
    def hammingWeight(self, n: int) -> int:\
        \
        return bin(n).count('1')\
\
class Solution:\
    def hammingWeight(self, n: int) -> int:\
        answer = n & 0b1\
        while n > 0:\
            n = n >> 1\
            answer += n & 0b1\
            \
        return answer}