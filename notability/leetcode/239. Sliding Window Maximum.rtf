{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u48176 \uc0\u50676  nums\uc0\u44032  \uc0\u51452 \uc0\u50612 \uc0\u51276 \uc0\u51012  \uc0\u46412  k \uc0\u53356 \uc0\u44592 \uc0\u51032  \uc0\u49836 \uc0\u46972 \uc0\u51060 \uc0\u46377  \uc0\u50952 \uc0\u46020 \uc0\u50864 \uc0\u47484  \uc0\u50724 \uc0\u47476 \uc0\u51901  \uc0\u45149 \uc0\u44620 \uc0\u51648  \uc0\u51060 \uc0\u46041 \uc0\u54616 \uc0\u47732 \uc0\u49436  \uc0\u52572 \uc0\u45824  \uc0\u49836 \uc0\u46972 \uc0\u51060 \uc0\u46377  \uc0\u50952 \uc0\u46020 \uc0\u50864 \uc0\u47484  \uc0\u44396 \uc0\u54616 \uc0\u46972 .\
\
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\
Output: [3,3,5,5,6,7]\
Explanation: \
Window position                Max\
---------------               -----\
[1  3  -1] -3  5  3  6  7       3\
 1 [3  -1  -3] 5  3  6  7       3\
 1  3 [-1  -3  5] 3  6  7       5\
 1  3  -1 [-3  5  3] 6  7       5\
 1  3  -1  -3 [5  3  6] 7       6\
 1  3  -1  -3  5 [3  6  7]      7\
\
\
1.deque \uc0\u54876 \uc0\u50857 \
from collections import deque\
\
class Solution:\
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\
        q = deque()\
        result = []\
        for i in range(len(nums)):\
            # the first/left (max) element is out of the current window\
            if q and i - q[0] == k:\
                q.popleft()\
            while q:\
                # pop useles elements from last/right of the queue\
                if nums[q[-1]] < nums[i]:\
                    q.pop()\
                else:\
                    break\
            q.append(i)\
            if i >= k-1: # i == k-1 is the beginning of a full window\
                result.append(nums[q[0]])\
        return result\
\
class Solution:\
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\
        res = []\
        window = collections.deque()\
        for i, num in enumerate(nums):\
            while window and num >= nums[window[-1]]:\
                window.pop()\
            window.append(i)\
            if i + 1 >= k:\
                res.append(nums[window[0]])\
            if i - window[0] + 1 == k:\
                window.popleft()\
        \
        return res\
\
import collections\
\
class Solution:\
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\
        if k == 1:\
            \
            return nums\
        else:\
            current = collections.deque()\
            answer = []\
            for index, num in enumerate(nums):\
                while len(current) > 0 and num >= nums[current[-1]]:\
                    current.pop()\
                current.append(index)\
                if index + 1 >= k:\
                    answer.append(nums[current[0]])\
                if index - current[0] + 1 == k:\
                    current.popleft()\
            \
            return answer\
}