{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid1921383633}
}
{\*\listoverridetable{\listoverride\listid1921383633\listoverridecount0\ls1921383633}}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u51473 \uc0\u48373 \uc0\u46108  \uc0\u47928 \uc0\u51088 \uc0\u47484  \uc0\u51228 \uc0\u50808 \uc0\u54616 \uc0\u44256  \uc0\u49324 \uc0\u51204 \uc0\u49885  \uc0\u49692 \uc0\u49436 \uc0\u47196  \uc0\u45208 \uc0\u50676 \uc0\u54616 \uc0\u46972 .\
\
Input: s = "bcabc"\
Output: "abc"\
\
1.\uc0\u51116 \uc0\u44480 \
class Solution:\
    def removeDuplicateLetters(self, s: str) -> str:\
        for c in sorted(set(s)):\
            suffix = s[s.index(c):]\
            if set(s) == set(suffix):\
                return c + self.removeDuplicateLetters(suffix.replace(c, ''))\
        return ''\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls1921383633\ilvl2{\listtext    \uc0\u9656    }\uc0\u50508 \uc0\u54028 \uc0\u48307  \uc0\u49692 \uc0\u51004 \uc0\u47196  suffix\uc0\u50504 \uc0\u50640  \uc0\u47784 \uc0\u46304  s\uc0\u50504 \uc0\u51032  \uc0\u47784 \uc0\u46304  \uc0\u47928 \uc0\u51088 \uc0\u44032  \uc0\u46308 \uc0\u50612 \uc0\u44032 \uc0\u45716 \uc0\u51648  \uc0\u51116 \uc0\u44480 \uc0\u51201 \uc0\u51004 \uc0\u47196  \uc0\u54032 \uc0\u48324 \
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
2.\uc0\u49828 \uc0\u53469 \
class Solution:\
    def removeDuplicateLetters(self, s: str) -> str:\
        counter, seen, stack = collections.Counter(s), set(), []\
        for char in s:\
            counter[char] -= 1\
            if char in seen:\
                continue\
            while stack and char < stack[-1] and counter[stack[-1]] > 0:\
                seen.remove(stack.pop())\
            stack.append(char)\
            seen.add(char)\
        return ''.join(stack)\
\
import collections\
\
class Solution:\
    def removeDuplicateLetters(self, s: str) -> str:\
        counter, stack = collections.Counter(s), []\
        for char in s:\
            counter[char] -= 1\
            if char in stack:\
                continue\
            while stack and char < stack[-1] and counter[stack[-1]] > 0:\
                stack.pop()\
            stack.append(char)\
        return ''.join(stack)\
\
class Solution:\
    def removeDuplicateLetters(self, s: str) -> str:\
        for _s in sorted(set(s)):\
            suffix = s[s.index(_s):]\
            if set(suffix) == set(s):\
                return _s + self.removeDuplicateLetters(suffix.replace(_s, ''))\
        \
        return ''}