{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u50672 \uc0\u44208  \uc0\u47532 \uc0\u49828 \uc0\u53944 \uc0\u47484  \uc0\u54848 \uc0\u49688 \uc0\u48264 \uc0\u51704  \uc0\u45432 \uc0\u46300  \uc0\u45796 \uc0\u51020 \uc0\u50640  \uc0\u51677 \uc0\u49688 \uc0\u48264 \uc0\u51704  \uc0\u45432 \uc0\u46300 \uc0\u44032  \uc0\u50724 \uc0\u46020 \uc0\u47197  \uc0\u51116 \uc0\u44396 \uc0\u49457 \uc0\u54616 \uc0\u46972 . \uc0\u44277 \uc0\u44036  \uc0\u48373 \uc0\u51105 \uc0\u46020  O(1), \uc0\u49884 \uc0\u44036  \uc0\u48373 \uc0\u51105 \uc0\u46020  O(n)\uc0\u50640  \uc0\u54400 \uc0\u51060 \uc0\u54616 \uc0\u46972 .\
\
Input: 1->2->3->4->5->NULL\
Output: 1->3->5->2->4->NULL\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
\
\
1.\uc0\u48152 \uc0\u48373 \
class Solution:\
    def oddEvenList(self, head: ListNode) -> ListNode:\
        if not head:\
            return head\
        odd, even, even_head = head, head.next, head.next\
        while even and even.next:\
            odd.next, even.next = odd.next.next, even.next.next\
            odd, even = odd.next, even.next\
        odd.next = even_head\
        return head\
\
class Solution:\
    def oddEvenList(self, head: ListNode) -> ListNode:\
        result = odd = head\
        prev = None\
        count = 1\
        while head:\
            if count % 2 and prev:\
                odd.next, prev.next, head.next, head, prev, odd = head, head.next, odd.next, head.next, head, head\
                count += 1\
                continue\
            prev, head = head, head.next\
            count += 1\
        return result\
\
class Solution:\
    def oddEvenList(self, head: ListNode) -> ListNode:\
        left = result = ListNode()\
        right = result_right = ListNode()\
        toggle = False\
        while head != None:\
            if not toggle:\
                left.next  = ListNode(val = head.val)\
                left = left.next\
            else:\
                right.next = ListNode(val = head.val)\
                right = right.next\
            head = head.next\
            toggle = not toggle\
        left.next = result_right.next\
        return result.next\
\
\
}