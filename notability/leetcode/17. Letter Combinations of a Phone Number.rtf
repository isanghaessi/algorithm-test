{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
2\uc0\u50640 \uc0\u49436  9\uc0\u44620 \uc0\u51648  \uc0\u49707 \uc0\u51088 \uc0\u44032  \uc0\u51452 \uc0\u50612 \uc0\u51276 \uc0\u51012  \uc0\u46412  \uc0\u51204 \uc0\u54868  \uc0\u48264 \uc0\u54840 \uc0\u47196  \uc0\u51312 \uc0\u54633  \uc0\u44032 \uc0\u45733 \uc0\u54620  \uc0\u47784 \uc0\u46304  \uc0\u47928 \uc0\u51088 \uc0\u47484  \uc0\u52636 \uc0\u47141 \uc0\u54616 \uc0\u46972 .\
\
\
\uc0\u65532 \
\
\
\
\
\
Example 1:\
Input: digits = "23"\
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]\
\
1.\uc0\u48652 \uc0\u47336 \uc0\u53944 \uc0\u54252 \uc0\u49828 \
class Solution:\
    def letterCombinations(self, digits: str) -> List[str]:\
        def comb(dest: str, string: str) -> None:\
            if len(dest) == 0:\
                if len(string) > 0:\
                    result.append(string)\
                return\
            cur = dest[0]\
            dest = dest[1:]\
            for s in strs[cur]:\
                comb(dest[:], (string + s)[:])\
                          \
        strs = \{\}\
        strs['2'] = 'abc'\
        strs['3'] = 'def'\
        strs['4'] = 'ghi'\
        strs['5'] = 'jkl'\
        strs['6'] = 'mno'\
        strs['7'] = 'pqrs'\
        strs['8'] = 'tuv'\
        strs['9'] = 'wxyz'\
        result = []\
        comb(digits, '')\
        return result\
\
class Solution:\
    def letterCombinations(self, digits: str) -> List[str]:\
        def dfs(index, path):\
            if len(path) == len(digits):\
                result.append(path)\
                return\
            for i in range(index, len(digits)):\
                for j in dic[digits[i]]:\
                    dfs(i + 1, path + j)\
        \
        if not digits:\
            return []\
        dic = \{\
            '2': 'abc',\
            '3': 'def',\
            '4': 'ghi',\
            '5': 'jkl',\
            '6': 'mno',\
            '7': 'pqrs',\
            '8': 'tuv',\
            '9': 'wxyz'\
        \}\
        result = []\
        dfs(0, '')\
        return result\
\
import itertools\
\
class Solution:\
    def letterCombinations(self, digits: str) -> List[str]:\
        result = []\
        \
        def dfs(comb, _digits):\
            if len(_digits) == 0:\
                if len(comb) > 0:\
                    result.append(comb)\
                \
                return\
            for a in alpha[_digits[0]]:\
                dfs(comb + a, _digits[1:])\
            \
        alpha = \{\
            '1': '',\
            '2': 'abc',\
            '3': 'def',\
            '4': 'ghi',\
            '5': 'jkl',\
            '6': 'mno',\
            '7': 'pqrs',\
            '8': 'tuv',\
            '9': 'wxyz',\
            '0': ''\
        \}\
        dfs('', digits)\
        \
        return result\
\
\
\
\
\
\
}