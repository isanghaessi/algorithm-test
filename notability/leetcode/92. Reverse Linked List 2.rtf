{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid-1493190710}
}
{\*\listoverridetable{\listoverride\listid-1493190710\listoverridecount0\ls-1493190710}}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u51064 \uc0\u45937 \uc0\u49828  m\uc0\u50640 \uc0\u49436  n\uc0\u44620 \uc0\u51648 \uc0\u47484  \uc0\u50669 \uc0\u49692 \uc0\u51004 \uc0\u47196  \uc0\u47564 \uc0\u46308 \uc0\u50612 \uc0\u46972 . \uc0\u51064 \uc0\u45937 \uc0\u49828  m\uc0\u51008  1\uc0\u48512 \uc0\u53552  \uc0\u49884 \uc0\u51089 \uc0\u54620 \uc0\u45796 .\
\
Input: head = [1,2,3,4,5], left = 2, right = 4\
Output: [1,4,3,2,5]\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
\
1.\uc0\u48652 \uc0\u47336 \uc0\u53944  \uc0\u54252 \uc0\u49828 \
class Solution:\
    def toList(self, head: ListNode) -> List[int]:\
        result = []\
        while head:\
            result.append(head.val)\
            head = head.next\
        return result\
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\
        if not head or not left<right:\
            return head\
        temp_list = self.toList(head)\
        reverse = temp_list[left -1:right]\
        reverse.reverse()\
        temp_list[left - 1:right] = reverse\
        result = None\
        for n in temp_list[::-1]:\
            result = ListNode(n, result)\
        return result\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls-1493190710\ilvl2{\listtext    \uc0\u9656    }\uc0\u47532 \uc0\u49828 \uc0\u53944 \uc0\u47196  \uc0\u48320 \uc0\u54872 \uc0\u54616 \uc0\u50668  \uc0\u52376 \uc0\u47532  \uc0\u54620 \uc0\u45796 .\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
2.\uc0\u48152 \uc0\u48373 \
class Solution:\
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\
        if not head or not left < right:\
            return head\
        result = start = ListNode(None, head)\
        for _ in range(left - 1):\
            start = start.next\
        end = start.next\
        for _ in range(right - left):\
            start.next, end.next, temp = end.next, end.next.next, start.next\
            start.next.next = temp\
        return result.next\
\
class Solution:\
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\
        def reverseLinkedList(prev, node, count):\
            p, q, r = prev, node, node\
            for i in range(count):\
                r, q.next, p = r.next, p, q\
                q = r\
            prev.next, node.next = p, q\
            \
            \
        result = temp = ListNode(next = head)   \
        for i in range(left - 1):\
            temp = temp.next\
        reverseLinkedList(temp, temp.next, right - left + 1)\
        return result.next\
\
\
\
\
\
\
\
\
\
}