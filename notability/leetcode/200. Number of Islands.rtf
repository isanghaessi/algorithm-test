{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
1\uc0\u51012  \uc0\u50977 \uc0\u51648 \uc0\u47196 , 0\uc0\u51012  \uc0\u47932 \uc0\u47196  \uc0\u44032 \uc0\u51221 \uc0\u54620  2D \uc0\u44536 \uc0\u47532 \uc0\u46300  \uc0\u47605 \uc0\u51060  \uc0\u51452 \uc0\u50612 \uc0\u51276 \uc0\u51012 \uc0\u46412 , \uc0\u49452 \uc0\u51032  \uc0\u44060 \uc0\u49688 \uc0\u47484  \uc0\u44228 \uc0\u49328 \uc0\u54616 \uc0\u46972 .\
\
Input: grid = [\
  ["1","1","1","1","0"],\
  ["1","1","0","1","0"],\
  ["1","1","0","0","0"],\
  ["0","0","0","0","0"]\
]\
Output: 1\
\
1.dfs\
class Solution:\
    def numIslands(self, grid: List[List[str]]) -> int:\
        def findWater(i: int, j: int) -> None:\
            if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1':\
                return\
            grid[i][j] = '0'\
            findWater(i + 1, j)\
            findWater(i - 1, j)\
            findWater(i, j + 1)\
            findWater(i, j - 1)\
        \
        result = 0\
        for i in range(len(grid)):\
            for j in range(len(grid[0])):\
                if grid[i][j] == '1':\
                    findWater(i, j)\
                    result += 1\
        return result\
\
class Solution:\
    def numIslands(self, grid: List[List[str]]) -> int:       \
        def find_island(i, j, is_first):\
            nonlocal answer\
            \
            if i not in range(len(grid)) or j not in range(len(grid[0])) or grid[i][j] == '0':\
                return\
            else:\
                if is_first:\
                    answer += 1\
                grid[i][j] = '0'\
                to_go = [[i - 1, j], [i + 1, j], [i, j - 1], [i, j + 1]]\
                for tg in to_go:\
                    find_island(*tg, False)\
                \
        answer = 0\
        \
        for i in range(len(grid)):\
            for j in range(len(grid[0])):\
                find_island(i, j, True)\
        \
        return answer\
                \
\
}