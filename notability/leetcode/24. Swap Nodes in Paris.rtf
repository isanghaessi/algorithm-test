{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u50672 \uc0\u44208  \uc0\u47532 \uc0\u49828 \uc0\u53944 \uc0\u47484  \uc0\u51077 \uc0\u47141 \uc0\u48155 \uc0\u50500  \uc0\u54168 \uc0\u50612  \uc0\u45800 \uc0\u50948 \uc0\u47196  \uc0\u49828 \uc0\u50769 \uc0\u54616 \uc0\u46972 .\
\
Input: head = [1,2,3,4]\
Output: [2,1,4,3]\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
\
1.\uc0\u44050 \uc0\u47564  \uc0\u44368 \uc0\u54872 \
class Solution:\
    def swapPairs(self, head: ListNode) -> ListNode:\
        result = head\
        while head and head.next:\
            head.val, head.next.val = head.next.val, head.val\
            head = head.next.next\
        return result\
\
2.\uc0\u48152 \uc0\u48373 \
class Solution:\
    def swapPairs(self, head: ListNode) -> ListNode:\
        root = prev = ListNode(None)\
        prev.next = head\
        while head and head.next:\
            b = head.next\
            head.next = b.next\
            b.next = head\
            prev.next = b\
            head = head.next\
            prev = prev.next.next\
        return root.next\
3.\uc0\u51116 \uc0\u44480 \
class Solution:\
    def swapPairs(self, head: ListNode) -> ListNode:\
        if head and head.next:\
            p = head.next\
            head.next = self.swapPairs(p.next)\
            p.next = head\
            return p\
        return head\
\
class Solution:\
    def swap(self, node: ListNode, next:ListNode) -> ListNode:\
        if not node or not node.next:\
            return node\
        nnext = next.next\
        nnnext = None\
        if next.next:\
            nnnext = next.next.next\
        node.next, next.next = self.swap(nnext, nnnext), node\
        return next\
    def swapPairs(self, head: ListNode) -> ListNode:\
        if not head or not head.next:\
            return head\
        head = self.swap(head, head.next)\
        return head\
\
\
\
\
\
\
\
\
\
\
}