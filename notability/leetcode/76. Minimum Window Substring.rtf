{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u47928 \uc0\u51088 \uc0\u50676  S\uc0\u50752  T\uc0\u47484  \uc0\u51077 \uc0\u47141 \uc0\u48155 \uc0\u50500  O(n)\uc0\u50640  T\uc0\u51032  \uc0\u47784 \uc0\u46304  \uc0\u47928 \uc0\u51088 \uc0\u44032  \uc0\u54252 \uc0\u54632 \uc0\u46108  S\uc0\u51032  \uc0\u52572 \uc0\u49548  \uc0\u50952 \uc0\u46020 \uc0\u50864 \uc0\u47484  \uc0\u52286 \uc0\u50500 \uc0\u46972 .\
\
Input: s = "ADOBECODEBANC", t = "ABC"\
Output: "BANC"\
\
1.\uc0\u49836 \uc0\u46972 \uc0\u51060 \uc0\u46377  \uc0\u50952 \uc0\u46020 \uc0\u50864 , \uc0\u53804 \uc0\u54252 \uc0\u51064 \uc0\u53552 , collections.Counter\
import collections\
\
class Solution:\
    def minWindow(self, s: str, t: str) -> str:\
        need = collections.Counter(t)\
        missing = len(t)\
        left = start = end = 0\
        for right, char in enumerate(s, 1):\
            missing -= need[char] > 0\
            need[char] -= 1\
            if missing == 0:\
                while left < right and need[s[left]] < 0:\
                    need[s[left]] += 1\
                    left += 1\
                if not end or right - left <= end - start:\
                    start, end = left, right\
                    need[s[left]] += 1\
                    missing += 1\
                    left += 1\
        return s[start:end]\
\
import collections\
\
class Solution:\
    def minWindow(self, s: str, t: str) -> str:\
        t_count = collections.Counter(t)\
        current_count = collections.Counter()\
        start = float('-inf')\
        end = float('inf')\
        left = 0\
        for right, char in enumerate(s, 1):\
            current_count[char] += 1\
            while current_count & t_count == t_count:\
                if right - left < end - start:\
                    start, end = left, right\
                current_count[s[left]] -= 1\
                left += 1\
        return s[start:end] if end - start <= len(s) else ''\
\
import collections\
\
class Solution:\
    def minWindow(self, s: str, t: str) -> str:\
        answer = ''\
        counter = collections.Counter(t)\
        missing = len(set(t))\
        i = 0\
        for j, _s in enumerate(s):\
            if _s in counter.keys():\
                counter[_s] -= 1\
                if counter[_s] == 0:\
                    missing -= 1\
            while missing == 0:\
                answer = answer if len(answer) > 0 and len(answer) < j - i + 1 else s[i:j + 1]\
                if s[i] in counter.keys():\
                    counter[s[i]] += 1\
                    if counter[s[i]] > 0:\
                        missing += 1\
                i += 1\
        \
        return answer\
                        }