{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u53944 \uc0\u46972 \uc0\u51060 \uc0\u51032  insert, search, startsWith \uc0\u47700 \uc0\u49548 \uc0\u46300 \uc0\u47484  \uc0\u44396 \uc0\u54788 \uc0\u54616 \uc0\u46972 .\
\
1.\uc0\u46357 \uc0\u49492 \uc0\u45320 \uc0\u47532  \uc0\u54876 \uc0\u50857 \
import collections\
\
class TrieNode:\
    def __init__(self):\
        self.word = False\
        self.children = collections.defaultdict(TrieNode)\
\
class Trie:   \
    def __init__(self):\
        """\
        Initialize your data structure here.\
        """\
        self.root = TrieNode()\
        \
\
    def insert(self, word: str) -> None:\
        """\
        Inserts a word into the trie.\
        """\
        node = self.root\
        for char in word:\
            node = node.children[char]\
        node.word = True\
        \
\
    def search(self, word: str) -> bool:\
        """\
        Returns if the word is in the trie.\
        """\
        node = self.root\
        for char in word:\
            if char not in node.children:\
                return False\
            node = node.children[char]\
        return node.word\
        \
\
    def startsWith(self, prefix: str) -> bool:\
        """\
        Returns if there is any word in the trie that starts with the given prefix.\
        """\
        node = self.root\
        for char in prefix:\
            if char not in node.children:\
                return False\
            node = node.children[char]\
        return True\
        \
\
\
# Your Trie object will be instantiated and called as such:\
# obj = Trie()\
# obj.insert(word)\
# param_2 = obj.search(word)\
# param_3 = obj.startsWith(prefix)\
\
import collections\
\
class TrieNode:\
    def __init__(self, word = False):\
        self.word = word\
        self.children = collections.defaultdict()\
\
        \
class Trie:\
    def __init__(self):\
        self.root = TrieNode()\
        \
\
    def insert(self, word: str) -> None:\
        current = self.root\
        for i, w in enumerate(word):\
            if w not in current.children.keys():\
                current.children[w] = TrieNode()\
            current = current.children[w]\
        current.word = True\
            \
\
    def search(self, word: str) -> bool:\
        current = self.root\
        for w in word:\
            if w not in current.children.keys():\
                \
                return False\
            current = current.children[w]\
        \
        return current.word\
        \
\
    def startsWith(self, prefix: str) -> bool:\
        current = self.root\
        for p in prefix:\
            if p not in current.children.keys():\
                \
                return False\
            current = current.children[p]\
        \
        return True\
        \
\
# Your Trie object will be instantiated and called as such:\
# obj = Trie()\
# obj.insert(word)\
# param_2 = obj.search(word)\
# param_3 = obj.startsWith(prefix)\
\
\
\
\
\
}