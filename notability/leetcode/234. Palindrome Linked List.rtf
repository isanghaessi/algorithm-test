{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid1780332598}
{\list\listtemplateid2\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid1536820536}
}
{\*\listoverridetable{\listoverride\listid1780332598\listoverridecount0\ls1780332598}{\listoverride\listid1536820536\listoverridecount0\ls1536820536}}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u50672 \uc0\u44208  \uc0\u47532 \uc0\u49828 \uc0\u53944 \uc0\u44032  \uc0\u54064 \uc0\u47536 \uc0\u46300 \uc0\u47212  \uc0\u44396 \uc0\u51312 \uc0\u51064 \uc0\u51648  \uc0\u54032 \uc0\u48324 \uc0\u54616 \uc0\u46972 \
\
Input: 1->2\
Output: false\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
\
1.\uc0\u47532 \uc0\u49828 \uc0\u53944 \uc0\u47196  \uc0\u48320 \uc0\u54872 \
class Solution:\
    def isPalindrome(self, head: ListNode) -> bool:\
        nums = []\
        node = head\
        while node:\
            nums.append(node.val)\
            node = node.next\
        while len(nums) > 1:\
            if nums.pop(0) != nums.pop():\
                return False\
        return True\
\
2.\uc0\u45936 \uc0\u53356  \uc0\u54876 \uc0\u50857 \
class Solution:\
    def isPalindrome(self, head: ListNode) -> bool:\
        nums = collections.deque()\
        node = head\
        while node:\
            nums.append(node.val)\
            node = node.next\
        while len(nums) > 1:\
            if nums.popleft() != nums.pop():\
                return False\
        return True\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls1780332598\ilvl2{\listtext    \uc0\u9656    }\uc0\u47532 \uc0\u49828 \uc0\u53944 (SLL)\uc0\u51032  \uc0\u44221 \uc0\u50864  pop(0)\uc0\u51060  O(n)\uc0\u51076 ,\
\ls1780332598\ilvl2{\listtext    \uc0\u9656    }\uc0\u45936 \uc0\u53356 \uc0\u51032 (DLL) \uc0\u44221 \uc0\u50864  popleft()\uc0\u44032  O(1)\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
3.\uc0\u47088 \uc0\u45320  \uc0\u54876 \uc0\u50857 \
class Solution:\
    def isPalindrome(self, head: ListNode) -> bool:\
        rev = None\
        slow = fast = head\
        while fast and fast.next:\
            fast = fast.next.next\
            rev, rev.next, slow = slow, rev, slow.next\
        if fast:\
            slow = slow.next\
        while rev and rev.val == slow.val:\
            slow, rev = slow.next, rev.next\
        return not rev\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls1536820536\ilvl2{\listtext    \uc0\u9656    }\uc0\u45712 \uc0\u47536 , \uc0\u48736 \uc0\u47480  \uc0\u47088 \uc0\u45320 \uc0\u47484  \uc0\u51060 \uc0\u50857 \uc0\u54644 \uc0\u49436  \uc0\u51473 \uc0\u44036  \uc0\u44050 \uc0\u48512 \uc0\u53552  \uc0\u54064 \uc0\u47536 \uc0\u46300 \uc0\u47212  \uc0\u50668 \uc0\u48512  \uc0\u44160 \uc0\u49324 \
\ls1536820536\ilvl2{\listtext    \uc0\u9656    }\uc0\u54848 \uc0\u49688 , \uc0\u51677 \uc0\u49688 \uc0\u47484  \uc0\u45796 \uc0\u47476 \uc0\u44172  \uc0\u52376 \uc0\u47532 \uc0\u54644 \uc0\u51468 \
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
class Solution:\
    def isPalindrome(self, head: ListNode) -> bool:\
        def toList(head):\
            _list = []\
            while head != None:\
                _list.append(head.val)\
                head = head.next\
            return _list\
        \
        my_list = toList(head)\
        return my_list == my_list[::-1]\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
class Solution:\
    def isPalindrome(self, head: Optional[ListNode]) -> bool:\
        def SLLToList(head):\
            result = []\
            while head:\
                result.append(head.val)\
                head = head.next\
            return result\
        \
        converted_list = SLLToList(head)\
        return converted_list == converted_list[::-1]\
            \
import collections\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
class Solution:\
    def isPalindrome(self, head: Optional[ListNode]) -> bool:\
        original_list = collections.deque()\
        reversed_list = collections.deque()\
        while head:\
            original_list.append(head.val)\
            reversed_list.appendleft(head.val)\
            head = head.next\
        return original_list == reversed_list\
}