{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable}
{\*\listoverridetable}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u47784 \uc0\u46304  \uc0\u48512 \uc0\u48516  \uc0\u51665 \uc0\u54633 \uc0\u51012  \uc0\u47532 \uc0\u53556 \uc0\u54616 \uc0\u46972 .\
\
Input: nums = [1,2,3]\
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\
\
1.dfs\
class Solution:\
    def subsets(self, nums: List[int]) -> List[List[int]]:\
        def dfs(index, path):\
            result.append(path) \
            for i in range(index, len(nums)):\
                dfs(i + 1, path + [nums[i]])\
        \
        result = []\
        dfs(0, [])\
        return result\
\
2.itertools.combinations\
import itertools\
\
class Solution:\
    def subsets(self, nums: List[int]) -> List[List[int]]:\
        result = []\
        for n in range(len(nums) + 1):\
            for c in itertools.combinations(nums, n):\
                result.append(list(c))\
        return result\
\
class Solution:\
    def subsets(self, nums: List[int]) -> List[List[int]]:\
        result = []\
        \
        def dfs(subset, index):\
            result.append(subset)\
            if index == len(nums):\
                \
                return\
            for i in range(index, len(nums)):\
                dfs(subset + [nums[i]], i + 1)\
        \
        \
        dfs([], 0)\
        \
        return result\
\
import itertools\
\
class Solution:\
    def subsets(self, nums: List[int]) -> List[List[int]]:\
        answer = []\
        for i in range(len(nums) + 1):\
            answer = [*answer, *map(list,itertools.combinations(nums, i))]\
        return answer\
\
}