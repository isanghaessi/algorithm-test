{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li0\lin0}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li500\lin500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li1000\lin1000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li1500\lin1500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li2000\lin2000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li2500\lin2500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{disc\}}{\leveltext \'01\'95}{\levelnumbers;}\fi-500\li3000\lin3000}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{circle\}}{\leveltext \'01\uc0\u9702 _;}{\levelnumbers;}\fi-500\li3500\lin3500}
{\listlevel\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0\levelnfc23\levelnfcn23{\*\levelmarker \{diamond\}}{\leveltext \'01\uc0\u9656 _;}{\levelnumbers;}\fi-500\li4000\lin4000}
{\listname ;}\listid-1214782565}
}
{\*\listoverridetable{\listoverride\listid-1214782565\listoverridecount0\ls-1214782565}}
\f0\fs24 \cf0 \pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\uc0\u51221 \uc0\u47148 \uc0\u46104 \uc0\u50612  \uc0\u51080 \uc0\u45716  \uc0\u46160  \uc0\u50672 \uc0\u44208  \uc0\u47532 \uc0\u49828 \uc0\u53944 \uc0\u47484  \uc0\u54633 \uc0\u52432 \uc0\u46972 .\
\
Input: l1 = [1,2,4], l2 = [1,3,4]\
Output: [1,1,2,3,4,4]\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
\
1.\uc0\u48652 \uc0\u47336 \uc0\u53944  \uc0\u54252 \uc0\u49828 \
class Solution:\
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\
        result = None\
        while l1 or l2:\
            if not l1:\
                result = ListNode(val = l2.val, next = result)\
                l2 = l2.next\
            elif not l2:\
                result = ListNode(val = l1.val, next = result)\
                l1 = l1.next\
            elif l1.val == l2.val:\
                result = ListNode(val = l1.val, next = result)\
                result = ListNode(val = l2.val, next = result)\
                l1 = l1.next\
                l2 = l2.next\
            elif l1.val < l2.val:\
                result = ListNode(val = l1.val, next = result)\
                l1 = l1.next\
            elif l1.val > l2.val:\
                result = ListNode(val = l2.val, next = result)\
                l2 = l2.next\
        rresult = None\
        while result:\
                rresult = ListNode(val = result.val, next = rresult)\
                result = result.next\
        return rresult\
\
2. \uc0\u51116 \uc0\u44480  \uc0\u54840 \uc0\u52636 \
class Solution:\
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\
        if (not l1) or (l2 and l1.val > l2.val):\
            l1, l2 = l2, l1\
        if l1:\
            l1.next = self.mergeTwoLists(l1.next, l2)\
        return l1\
\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi-1000\li2000
\ls-1214782565\ilvl2{\listtext    \uc0\u9656    }l1, l2\uc0\u47484  \uc0\u48708 \uc0\u44368 \uc0\u54616 \uc0\u50668  \uc0\u51089 \uc0\u51008 \uc0\u44163 \uc0\u51012  l1\uc0\u50640  \uc0\u51080 \uc0\u44172 \uc0\u54632 ,\
\ls-1214782565\ilvl2{\listtext    \uc0\u9656    }l1.next\uc0\u47484  l2\uc0\u50752  \uc0\u45796 \uc0\u49884 \uc0\u48708 \uc0\u44368 \uc0\u54620 \uc0\u45796 .\
\pard\tx0\tx500\tx1000\tx1500\tx2000\tx2500\tx3000\tx3500\tx4000\tx4500\tx5000\tx5500\tx6000\ql\fi0\li0
\
class Solution:\
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\
        result  = temp = ListNode()\
        while l1 != None and l2 != None:\
            if l1.val <= l2.val:\
                temp.next = ListNode(val = l1.val)\
                l1 = l1.next\
            else:\
                temp.next = ListNode(val = l2.val)\
                l2 = l2.next\
            temp = temp.next\
        while l1 != None:\
            temp.next = ListNode(val = l1.val)\
            l1 = l1.next\
            temp = temp.next\
        while l2 != None:\
            temp.next = ListNode(val = l2.val)\
            l2 = l2.next\
            temp = temp.next\
        return result.next\
\
# Definition for singly-linked list.\
# class ListNode:\
#     def __init__(self, val=0, next=None):\
#         self.val = val\
#         self.next = next\
class Solution:\
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\
        def SLLToList(head):\
            result = []\
            while head:\
                result.append(head.val)\
                head = head.next\
            return result\
        \
        \
        def ListToSLL(list):\
            head = temp = ListNode()\
            for l in list:\
                temp.next = ListNode(l)\
                temp = temp.next\
            return head.next\
        \
        \
        list1 = SLLToList(list1)\
        list2 = SLLToList(list2)\
        return ListToSLL(sorted([*list1, *list2]))\
\
\
\
\
\
\
\
}